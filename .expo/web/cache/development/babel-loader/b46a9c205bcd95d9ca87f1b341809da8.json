{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\amogh\\\\TestReactNativeApp\\\\components\\\\EditScreenInfo.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport 'react-native';\nimport LinearGradient from 'react-native-linear-gradient';\nimport Colors from \"../constants/Colors\";\nimport { MonoText } from \"./StyledText\";\nimport { Text, View } from \"./Themed\";\n\nvar _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    text = _useState2[0],\n    setText = _useState2[1];\n\nvar _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    results = _useState4[0],\n    setResults = _useState4[1];\n\nvar _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    title = _useState6[0],\n    setTitle = _useState6[1];\n\nvar _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    recipeImageUri = _useState8[0],\n    setRecipeImageUri = _useState8[1];\n\nvar _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    missingIngredients = _useState10[0],\n    setMissingIngredients = _useState10[1];\n\nvar placeholderText = \"Type a list of ingredients (comma-seperated)\";\nexport default function EditScreenInfo(_ref) {\n  var _this = this;\n\n  var path = _ref.path;\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.getStartedContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Open up the code for this screen:\"), React.createElement(View, {\n    style: [styles.codeHighlightContainer, styles.homeScreenFilename],\n    darkColor: \"rgba(255,255,255,0.05)\",\n    lightColor: \"rgba(0,0,0,0.05)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(MonoText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, path)), React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"Search for Recipes:\"), React.createElement(TextInput, {\n    style: styles.getStartedText,\n    onChangeText: setText,\n    value: text,\n    placeholder: placeholderText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), React.createElement(LinearGradient, {\n    colors: [\"rgba(0,0,0,0.05)\", \"rgba(0,0,0,0)\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, results && results.map(function (recipe, idx) {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, recipe));\n  })), React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Change any of the text, save the file, and your app will automatically update.\")), React.createElement(View, {\n    style: styles.helpContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleHelpPress,\n    style: styles.helpLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.helpLinkText,\n    lightColor: Colors.light.tint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Tap here if your app doesn't automatically update after making changes\"))));\n}\nvar baseUrl = 'https://api.spoonacular.com/recipes/';\nvar apiKey = '05f3e5cbe3194079a0484c97fa512c66';\n\nvar safeEncodeURIComponent = function safeEncodeURIComponent(raw) {\n  return encodeURIComponent(raw).replace(/'/g, \"%27\");\n};\n\nvar getRecipesFromQuery = function getRecipesFromQuery(query, numberOfResults) {\n  var apiUrl, response, json;\n  return _regeneratorRuntime.async(function getRecipesFromQuery$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          apiUrl = safeEncodeURIComponent(baseUrl + \"/recipes/complexSearch?apiKey=\" + apiKey + \"&query=\" + query + \"\\n                                                              \" + (numberOfResults && numberOfResults > 0 ? '&number=' : '') + numberOfResults);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(apiUrl));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          json = _context.sent;\n          setResults(json.results);\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync('https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet');\n}\n\nvar styles = StyleSheet.create({\n  tinyLogo: {\n    width: 50,\n    height: 50\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n  homeScreenFilename: {\n    marginVertical: 7\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center'\n  },\n  helpLink: {\n    paddingVertical: 15\n  },\n  helpLinkText: {\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/amogh/TestReactNativeApp/components/EditScreenInfo.tsx"],"names":["WebBrowser","React","useState","LinearGradient","Colors","MonoText","Text","View","text","setText","results","setResults","title","setTitle","recipeImageUri","setRecipeImageUri","missingIngredients","setMissingIngredients","placeholderText","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","map","recipe","idx","helpContainer","handleHelpPress","helpLink","helpLinkText","light","tint","baseUrl","apiKey","safeEncodeURIComponent","raw","encodeURIComponent","replace","getRecipesFromQuery","query","numberOfResults","apiUrl","fetch","response","json","console","error","openBrowserAsync","StyleSheet","create","tinyLogo","width","height","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical"],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport { StyleSheet, TouchableOpacity, TextInput, Image } from 'react-native';\nimport {  } from 'react-native';\nimport LinearGradient from 'react-native-linear-gradient';\n// import { LinearGradient } from 'expo-linear-gradient';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nconst [text, setText] = useState('');\nconst [results, setResults] = useState([]);\nconst [title, setTitle] = useState('');\nconst [recipeImageUri, setRecipeImageUri] = useState('');\nconst [missingIngredients, setMissingIngredients] = useState(null);\n\nconst placeholderText = \"Type a list of ingredients (comma-seperated)\";\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Search for Recipes:\n        </Text>\n\n        <TextInput\n          style={styles.getStartedText}\n          onChangeText={setText}\n          value={text}\n          placeholder={placeholderText}\n        />\n        \n        <LinearGradient colors={[\"rgba(0,0,0,0.05)\", \"rgba(0,0,0,0)\"]}>\n          {results && results.map((recipe, idx) => (\n            <View>\n              <Text>{recipe}</Text>\n            </View>\n          ))}\n        </LinearGradient>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst baseUrl = 'https://api.spoonacular.com/recipes/';\nconst apiKey = '05f3e5cbe3194079a0484c97fa512c66';\n\nconst safeEncodeURIComponent = (raw: string) =>\n{\n    return encodeURIComponent(raw).replace(/'/g, \"%27\");\n}\n\nconst getRecipesFromQuery = async (query: string, numberOfResults: number) => {\n  try {\n    const apiUrl = safeEncodeURIComponent(`${baseUrl}/recipes/complexSearch?apiKey=${apiKey}&query=${query}\n                                                              ${numberOfResults && (numberOfResults > 0)? '&number=' : ''}${numberOfResults}`);\n\n    const response = await fetch(apiUrl);\n    const json = await response.json();\n    setResults(json.results); \n  } catch (error) {\n    console.error(error);\n  }\n};\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  tinyLogo: {\n    width: 50,\n    height: 50,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}