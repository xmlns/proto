{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\amogh\\\\TestReactNativeApp\\\\components\\\\EditScreenInfo.tsx\";\nimport * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport 'react-native';\nimport Colors from \"../constants/Colors\";\nimport { MonoText } from \"./StyledText\";\nimport { Text, View } from \"./Themed\";\n\nvar _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    text = _useState2[0],\n    setText = _useState2[1];\n\nvar placeholderText = \"Type a list of ingredients (comma-seperated)\";\nexport default function EditScreenInfo(_ref) {\n  var path = _ref.path;\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.getStartedContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"Open up the code for this screen:\"), React.createElement(View, {\n    style: [styles.codeHighlightContainer, styles.homeScreenFilename],\n    darkColor: \"rgba(255,255,255,0.05)\",\n    lightColor: \"rgba(0,0,0,0.05)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(MonoText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, path)), React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"Search for Recipes:\"), React.createElement(TextInput, {\n    style: styles.getStartedText,\n    onChangeText: setText,\n    value: text,\n    placeholder: placeholderText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.getStartedText,\n    lightColor: \"rgba(0,0,0,0.8)\",\n    darkColor: \"rgba(255,255,255,0.8)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Change any of the text, save the file, and your app will automatically update.\")), React.createElement(View, {\n    style: styles.helpContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleHelpPress,\n    style: styles.helpLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.helpLinkText,\n    lightColor: Colors.light.tint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Tap here if your app doesn't automatically update after making changes\"))));\n}\n\nfunction onChangeText() {}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync('https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet');\n}\n\nvar styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n  homeScreenFilename: {\n    marginVertical: 7\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center'\n  },\n  helpLink: {\n    paddingVertical: 15\n  },\n  helpLinkText: {\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/amogh/TestReactNativeApp/components/EditScreenInfo.tsx"],"names":["WebBrowser","React","useState","Colors","MonoText","Text","View","text","setText","placeholderText","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","light","tint","onChangeText","openBrowserAsync","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical"],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport { StyleSheet, TouchableOpacity, TextInput } from 'react-native';\nimport {  } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nconst [text, setText] = useState('');\nconst placeholderText = \"Type a list of ingredients (comma-seperated)\"\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Search for Recipes:\n        </Text>\n\n        <TextInput\n          style={styles.getStartedText}\n          onChangeText={setText}\n          value={text}\n          placeholder={placeholderText}\n        />\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction onChangeText()\n{\n\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}