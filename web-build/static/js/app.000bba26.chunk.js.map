{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","components/recipes.js","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","EditScreenInfo","path","styles","getStartedContainer","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","tinyLogo","width","height","alignItems","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightContainer","borderRadius","paddingHorizontal","getStartedText","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","NotFoundScreen","navigation","replace","link","linkText","padding","Recipes","useState","isLoading","setLoading","query","setQuery","results","setResults","getRecipesFromQuery","a","async","toString","length","apiUrl","baseUrl","console","log","fetch","response","json","error","TextInput","textInput","onChangeText","value","placeholder","Button","LinearGradient","colors","scrollView","FlatList","data","keyExtractor","result","id","renderItem","item","recipeName","Image","resizeMode","source","uri","image","marginLeft","paddingTop","TabOneScreen","TabTwoScreen","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","Pressable","navigate","opacity","pressed","FontAwesome","size","marginRight","marginBottom","App","isLoadingComplete","React","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.000bba26.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport { StyleSheet, TouchableOpacity, TextInput, FlatList, Image } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  tinyLogo: {\n    width: 50,\n    height: 50,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, StyleSheet, TouchableOpacity, TextInput, FlatList, Image } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nimport { Text, View } from './Themed';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\nconst baseUrl = 'https://api.spoonacular.com/recipes';\r\nconst apiKey = '05f3e5cbe3194079a0484c97fa512c66';\r\n\r\nconst safeEncodeURIComponent = (raw) =>\r\n{\r\n    return encodeURIComponent(raw).replace(/'/g, \"%27\");\r\n}\r\n\r\n\r\nconst placeholderText = \"Type a list of ingredients\";\r\n\r\nconst RecipeSearch = props =>\r\n{\r\n    return (\r\n        <View>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst Recipes = props =>\r\n{\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [query, setQuery] = useState('');\r\n    const [results, setResults] = useState([]);\r\n\r\n    const getRecipesFromQuery = async () => {\r\n        try {\r\n            if (query && query.toString().length > 0) {\r\n              let apiUrl = `${baseUrl}/complexSearch?apiKey=${apiKey}&query=${query}`;\r\n            \r\n              console.log(`formed URL: ${apiUrl}`);\r\n              const response = await fetch(apiUrl);\r\n              const json = await response.json();\r\n              console.log(json.results);\r\n              setResults(json.results);\r\n              setLoading(false);\r\n            }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View>\r\n        <TextInput\r\n          style={styles.textInput}\r\n          onChangeText={setQuery}\r\n          value={query}\r\n          placeholder={placeholderText}\r\n        />\r\n\r\n        <Button title=\"Go!\" style={styles.Button} onPress={async () => { setLoading(true); getRecipesFromQuery() }} />\r\n\r\n\r\n        {isLoading ? <Text>Loading...</Text> :\r\n        (\r\n        <LinearGradient colors={[\"rgba(0,0,0,0.05)\", \"rgba(0,0,0,0)\"]}>\r\n            <ScrollView style={styles.scrollView}>\r\n            <FlatList\r\n                data={results}\r\n                keyExtractor={ result => result.id.toString() }\r\n                renderItem={({item}) => (\r\n                    <View>\r\n                      <Text style={styles.recipeName}>{item.title}</Text>\r\n                      <Image resizeMode={'center'} style={styles.tinyLogo} source={{ uri: item.image.toString() }}></Image>\r\n                    </View>\r\n                )}\r\n                />\r\n            </ScrollView>\r\n        </LinearGradient>)}\r\n        </View>\r\n    );\r\n};\r\nexport default Recipes;\r\n  \r\nconst styles = StyleSheet.create({\r\n    tinyLogo: {\r\n      width: 200,\r\n      height: 200,\r\n      alignItems: 'center',\r\n      marginLeft: 270\r\n    },\r\n    getStartedText: {\r\n      fontSize: 17,\r\n      lineHeight: 24,\r\n      textAlign: 'center',\r\n    },\r\n    textInput: {\r\n      color: 'white',\r\n      fontSize: 50\r\n    },\r\n    Button: {paddingTop: '10px'},\r\n    scrollView: {\r\n      marginHorizontal: 20,\r\n      width: 760,\r\n      height: 480,\r\n    },\r\n    recipeName: {\r\n      fontSize: 20,\r\n      textAlign: 'center',\r\n    }\r\n  });","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Recipes from '../components/recipes';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Search for recipes</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      \n      <Recipes></Recipes>\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Tab One',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Tab Two',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n\n  \n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}